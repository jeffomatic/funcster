// Generated by CoffeeScript 1.6.2
(function() {
  var funcster, should, testHelper, _;

  _ = require('underscore');

  should = require('should');

  testHelper = require('./test_helper');

  funcster = require('../lib/funcster');

  describe('funcster module', function() {
    describe('serialize()', function() {
      before(function(done) {
        this.testFunc = function(arg) {
          return "Hello " + arg + "!";
        };
        this.serializedTestFunc = funcster.serialize(this.testFunc);
        return done();
      });
      it('should wrap a function in an object', function(done) {
        _.keys(this.serializedTestFunc).should.eql(['__js_function']);
        return done();
      });
      it('should serialize the function to a string', function(done) {
        this.serializedTestFunc.__js_function.should.eql(this.testFunc.toString());
        return done();
      });
      return it('should allow for custom serialization markers', function(done) {
        var serialzed;

        serialzed = funcster.serialize(this.testFunc, 'CUSTOM_MARKER');
        _.keys(serialzed).should.eql(['CUSTOM_MARKER']);
        return done();
      });
    });
    describe('deepSerialize()', function() {
      before(function(done) {
        this.original = {
          arr: [
            function(arg) {
              return "Hello " + arg + "!";
            }, 'hello!', 1, function(arg) {
              return "Goodbye " + arg + "!";
            }, {
              foo: 'bar',
              foobar: function(arg) {
                return "FOOBAR: " + arg;
              }
            }
          ],
          obj: {
            a: [
              {
                b: {
                  c: function(arg) {
                    return "Super deep! " + arg;
                  }
                }
              }
            ],
            z: 'just a string!'
          }
        };
        this.serialized = funcster.deepSerialize(this.original);
        return done();
      });
      it('should serialize deeply nested functions', function(done) {
        this.serialized.arr[0].__js_function.should.eql(this.original.arr[0].toString());
        this.serialized.arr[3].__js_function.should.eql(this.original.arr[3].toString());
        this.serialized.arr[4].foobar.__js_function.should.eql(this.original.arr[4].foobar.toString());
        this.serialized.obj.a[0].b.c.__js_function.should.eql(this.original.obj.a[0].b.c.toString());
        return done();
      });
      return it('should retain non-function values', function(done) {
        this.serialized.arr[1].should.eql('hello!');
        this.serialized.arr[2].should.eql(1);
        this.serialized.arr[4].foo.should.eql('bar');
        this.serialized.obj.z.should.eql('just a string!');
        return done();
      });
    });
    describe('_deepSelectSerializations()', function() {
      before(function(done) {
        this.selected = funcster._deepSelectSerializations(this.serialized);
        return done();
      });
      it('should collect all serialized functions', function(done) {
        this.selected.length.should.eql(4);
        return done();
      });
      return it('should set paths correctly', function(done) {
        this.selected[0].path.should.eql(['arr', '0']);
        this.selected[1].path.should.eql(['arr', '3']);
        this.selected[2].path.should.eql(['arr', '4', 'foobar']);
        this.selected[3].path.should.eql(['obj', 'a', '0', 'b', 'c']);
        return done();
      });
    });
    describe('_generateModuleScript()', function() {
      return it('should encode functions into a text script', function(done) {
        var functions, script;

        functions = {
          'func_a': 'function(arg) { return arg; }',
          'func_b': 'function(arg) { return [ arg ]; }'
        };
        script = funcster._generateModuleScript(functions);
        script.should.eql('module.exports=(function(global,module,exports){return{func_a: function(arg) { return arg; },func_b: function(arg) { return [ arg ]; }};})();');
        return done();
      });
    });
    describe('_generateModule()', function() {
      it('should export objects', function(done) {
        var func, moduleObj, script;

        func = function(arg) {
          return "Hello " + arg + "!";
        };
        script = "module.exports = { foo: " + (func.toString()) + " }";
        moduleObj = funcster._generateModule(script);
        (moduleObj != null).should.eql(true);
        (moduleObj.foo != null).should.eql(true);
        moduleObj.foo('world').should.eql('Hello world!');
        return done();
      });
      it('should not include typical node.js globals by default', function(done) {
        var functions, moduleObj, obj, objects, script, _i, _j, _len, _len1;

        objects = ['process', 'require', 'setTimeout', 'clearTimeout', 'setInterval', 'clearInterval', 'console', 'Buffer', '__filename', '__dirname'];
        functions = [];
        for (_i = 0, _len = objects.length; _i < _len; _i++) {
          obj = objects[_i];
          functions.push("" + obj + ": function() { " + obj + "; }");
        }
        script = 'module.exports = {' + functions.join(',') + '}';
        moduleObj = funcster._generateModule(script);
        for (_j = 0, _len1 = objects.length; _j < _len1; _j++) {
          obj = objects[_j];
          (function() {
            return moduleObj[obj]();
          }).should["throw"](/is not defined/);
        }
        return done();
      });
      it('should have falsy values for global, modules and exports when using standard template', function(done) {
        var functions, moduleObj, obj, objects, script, _i, _j, _len, _len1;

        objects = ['global', 'module', 'exports'];
        functions = {};
        for (_i = 0, _len = objects.length; _i < _len; _i++) {
          obj = objects[_i];
          functions[obj] = "function() { return !" + obj + "; }";
        }
        script = funcster._generateModuleScript(functions);
        moduleObj = funcster._generateModule(script);
        for (_j = 0, _len1 = objects.length; _j < _len1; _j++) {
          obj = objects[_j];
          moduleObj[obj]().should.eql(true);
        }
        return done();
      });
      it('should define standard global values', function(done) {
        var functions, moduleObj, obj, objects, script, _i, _j, _len, _len1;

        objects = ['Object', 'Array', 'String', 'Date', 'Function'];
        functions = {};
        for (_i = 0, _len = objects.length; _i < _len; _i++) {
          obj = objects[_i];
          functions[obj] = "function() { return !!" + obj + "; }";
        }
        script = funcster._generateModuleScript(functions);
        moduleObj = funcster._generateModule(script);
        for (_j = 0, _len1 = objects.length; _j < _len1; _j++) {
          obj = objects[_j];
          moduleObj[obj]().should.eql(true);
        }
        return done();
      });
      it('instanceof operator fails by default', function(done) {
        var functions, moduleObj, obj, objects, script, _i, _len;

        objects = ['Object', 'Array', 'String', 'Date', 'Function'];
        functions = {};
        for (_i = 0, _len = objects.length; _i < _len; _i++) {
          obj = objects[_i];
          functions[obj] = "function(arg) { return arg instanceof " + obj + "; }";
        }
        script = funcster._generateModuleScript(functions);
        moduleObj = funcster._generateModule(script);
        moduleObj.Object({}).should.eql(false);
        moduleObj.Array([]).should.eql(false);
        moduleObj.String(new String).should.eql(false);
        moduleObj.Function(function() {}).should.eql(false);
        moduleObj.Date(new Date).should.eql(false);
        return done();
      });
      return it('instanceof operator succeeds with global injection', function(done) {
        var functions, moduleObj, obj, objects, script, _i, _len;

        objects = ['Object', 'Array', 'String', 'Date', 'Function'];
        functions = {};
        for (_i = 0, _len = objects.length; _i < _len; _i++) {
          obj = objects[_i];
          functions[obj] = "function(arg) { return arg instanceof " + obj + "; }";
        }
        script = funcster._generateModuleScript(functions);
        moduleObj = funcster._generateModule(script, {
          globals: {
            Object: Object,
            Array: Array,
            String: String,
            Function: Function,
            Date: Date
          }
        });
        moduleObj.Object({}).should.eql(true);
        moduleObj.Array([]).should.eql(true);
        moduleObj.String(new String).should.eql(true);
        moduleObj.Function(function() {}).should.eql(true);
        moduleObj.Date(new Date).should.eql(true);
        return done();
      });
    });
    return describe('deepDeserialize()', function() {
      before(function(done) {
        this.original = {
          arr: [
            function(arg) {
              return "Hello " + arg + "!";
            }, 'hello!', 1, function(arg) {
              return "Goodbye " + arg + "!";
            }, {
              foo: 'bar',
              foobar: function(arg) {
                return "FOOBAR: " + arg;
              }
            }
          ],
          obj: {
            a: [
              {
                b: {
                  c: function(arg) {
                    return "Super deep! " + arg;
                  }
                }
              }
            ],
            z: 'just a string!'
          }
        };
        this.serialized = funcster.deepSerialize(this.original);
        this.deserialized = funcster.deepDeserialize(this.serialized);
        return done();
      });
      describe('overloaded signature', function() {
        it('one arg: root', function(done) {
          var deserialized, serialized;

          serialized = {
            __js_function: 'function() { return "hello" }'
          };
          deserialized = funcster.deepDeserialize(serialized);
          deserialized().should.eql('hello');
          return done();
        });
        it('two args: root, marker', function(done) {
          var deserialized, serialized;

          serialized = {
            CUSTOM_MARKER: 'function() { return "hello" }'
          };
          deserialized = funcster.deepDeserialize(serialized, 'CUSTOM_MARKER');
          deserialized().should.eql('hello');
          return done();
        });
        it('two args: root, moduleOpts', function(done) {
          var deserialized, serialized;

          serialized = {
            __js_function: 'function() { return foobar }'
          };
          deserialized = funcster.deepDeserialize(serialized, {
            globals: {
              foobar: 'hello'
            }
          });
          deserialized().should.eql('hello');
          return done();
        });
        return it('three args: root, marker, moduleOpts', function(done) {
          var deserialized, serialized;

          serialized = {
            CUSTOM_MARKER: 'function() { return foobar }'
          };
          deserialized = funcster.deepDeserialize(serialized, 'CUSTOM_MARKER', {
            globals: {
              foobar: 'hello'
            }
          });
          deserialized().should.eql('hello');
          return done();
        });
      });
      it('deserialized functions should work like unserialized versions', function(done) {
        this.deserialized.arr[0]('world').should.eql(this.original.arr[0]('world'));
        this.deserialized.arr[3]('world').should.eql(this.original.arr[3]('world'));
        this.deserialized.arr[4].foobar('world').should.eql(this.original.arr[4].foobar('world'));
        this.deserialized.obj.a[0].b.c('world').should.eql(this.original.obj.a[0].b.c('world'));
        return done();
      });
      it('deserialized functions should not be copies of the unserialized versions', function(done) {
        (this.deserialized.arr[0] !== this.original.arr[0]).should.eql(true);
        (this.deserialized.arr[3] !== this.original.arr[3]).should.eql(true);
        (this.deserialized.arr[4].foobar !== this.original.arr[4].foobar).should.eql(true);
        (this.deserialized.obj.a[0].b.c !== this.original.obj.a[0].b.c).should.eql(true);
        return done();
      });
      return it('should preserve the original structure', function(done) {
        this.deserialized.arr[1].should.eql(this.original.arr[1]);
        this.deserialized.obj.z.should.eql(this.original.obj.z);
        return done();
      });
    });
  });

}).call(this);
