// Generated by CoffeeScript 1.6.3
(function() {
  var deep, funcster, jsmin, vm, _,
    __slice = [].slice;

  _ = require('underscore');

  vm = require('vm');

  deep = require('deep');

  jsmin = require('../../deps/jsmin').minify;

  funcster = {
    serialize: function(func, marker) {
      var wrapper;
      if (marker == null) {
        marker = '__js_function';
      }
      wrapper = {};
      wrapper[marker] = jsmin('', func.toString(), 3);
      return wrapper;
    },
    deepSerialize: function(root, marker) {
      if (marker == null) {
        marker = '__js_function';
      }
      return deep.transform(root, _.isFunction, function(func) {
        return funcster.serialize(func, marker);
      });
    },
    deepDeserialize: function() {
      var extraArgs, f, functions, functionsByName, marker, moduleContent, moduleObj, moduleOpts, root, _i, _j, _k, _len, _len1, _len2;
      root = arguments[0], extraArgs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      switch (extraArgs.length) {
        case 0:
          marker = '__js_function';
          moduleOpts = {};
          break;
        case 1:
          if (_.isString(extraArgs[0])) {
            marker = extraArgs[0];
            moduleOpts = {};
          } else {
            marker = '__js_function';
            moduleOpts = extraArgs[0];
          }
          break;
        default:
          marker = extraArgs[0];
          moduleOpts = extraArgs[1];
      }
      root = deep.clone(root);
      functions = this._deepSelectSerializations(root, marker);
      for (_i = 0, _len = functions.length; _i < _len; _i++) {
        f = functions[_i];
        f.name = "func_" + f.path.join('_');
      }
      functionsByName = {};
      for (_j = 0, _len1 = functions.length; _j < _len1; _j++) {
        f = functions[_j];
        functionsByName[f.name] = f.value[marker];
      }
      moduleContent = this._generateModuleScript(functionsByName);
      moduleObj = this._generateModule(moduleContent, moduleOpts);
      for (_k = 0, _len2 = functions.length; _k < _len2; _k++) {
        f = functions[_k];
        if (!f.path.length) {
          return moduleObj[f.name];
        }
        deep.set(root, f.path, moduleObj[f.name]);
      }
      return root;
    },
    _deepSelectSerializations: function(root, marker) {
      if (marker == null) {
        marker = '__js_function';
      }
      return deep.select(root, function(obj) {
        return _.isObject(obj) && _.isString(obj[marker]);
      });
    },
    _generateModuleScript: function(serializedFunctions) {
      var body, entries, name;
      entries = [];
      for (name in serializedFunctions) {
        body = serializedFunctions[name];
        entries.push("" + name + ": " + body);
      }
      entries = entries.join(',');
      return "module.exports=(function(module,exports){return{" + entries + "};})();";
    },
    _rerequire: function(modulesByName) {
      var backupCache, k, module, modules, name, v, _ref, _ref1;
      backupCache = {};
      _ref = require.cache;
      for (k in _ref) {
        v = _ref[k];
        backupCache[k] = v;
        delete require.cache[k];
      }
      modules = {};
      for (name in modulesByName) {
        module = modulesByName[name];
        modules[name] = require(module);
      }
      _ref1 = require.cache;
      for (k in _ref1) {
        v = _ref1[k];
        delete require.cache[k];
      }
      for (k in backupCache) {
        v = backupCache[k];
        require.cache[k] = v;
      }
      return modules;
    },
    _generateModule: function(script, opts) {
      var exportsObj, globals, k, sandbox, v, _ref;
      if (opts == null) {
        opts = {};
      }
      sandbox = {};
      exportsObj = {};
      sandbox.exports = exportsObj;
      sandbox.module = {
        exports: exportsObj
      };
      globals = opts.globals || {};
      for (k in globals) {
        v = globals[k];
        sandbox[k] = v;
      }
      if (opts.requires != null) {
        _ref = this._rerequire(opts.requires);
        for (k in _ref) {
          v = _ref[k];
          sandbox[k] = v;
        }
      }
      vm.createScript(script, opts.filename).runInNewContext(sandbox);
      return sandbox.module.exports;
    }
  };

  module.exports = funcster;

}).call(this);
